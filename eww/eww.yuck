(include "test.yuck")

(defwindow bar :monitor 0
               :stacking "fg"
               :exclusive true
               :geometry (geometry :width "1920"
                                   :height "30px"
                                   :anchor "top center")
                (centerbox :class "bar"
                    (left_widgets)
                    (center_widgets)
                    (right_widgets)))

(defwidget left_widgets []
    (workspaces))

(defwidget center_widgets []
    (eventbox :class "cc_button"
              :onclick "hyprctl dispatch exec gnome-calendar"
              (cc)))

(defwidget right_widgets []
    (centerbox :halign "end"
               :class "right_widgets"
               (eventbox :onclick "hyprctl dispatch exec gnome-system-monitor "
                         :class "info_button"
                         :halign "end"
                         (info))
               (eventbox :class "layout_button"
                         :onclick "hyprctl switchxkblayout at-translated-set-2-keyboard next"
                         (layout))
               (eventbox :onclick `./scripts/btn/toggle_menu`
                         :class "menu_button"
                         (btn))))


;;left_widgets

(deflisten workspaces :initial "1" `./scripts/get-workspaces`)

(deflisten current_workspace :initial "1" `./scripts/get-active-workspace`)

(defwidget workspaces []
    (box :orientation "h" 
         :space-evenly false 
         :class "workspaces" 
        (for workspace in workspaces
            (eventbox 
                :class "${current_workspace == workspace.id ? "current" : "occupied"}" 
                :onclick "hyprctl dispatch workspace ${workspace.id}" 
                (box :class "${current_workspace == workspace.id ? "current" : "occupied"}" 
                    "${workspace.id}")
            )
        )
    )
)


;;;
(deflisten window :initial "" `./scripts/window title`)

(defwidget activewindow []
    (box :class "workspaces"
         :halign "start"
         (label
            :visible {window != "null" ? true : false}
            :text window)))
;;;


;; center_widgets

(defpoll time :interval "1s" "date '+%H:%M %b %d'")

(defwidget cc [] (box :class "cc_button "time))


;; right_widgets

(defwidget info []
    (box :class "info"
         :halign "end"
         "${round(EWW_CPU.avg, 0)}%    ${round(EWW_TEMPS.K10TEMP_TCTL, 0)}°C   ${round(EWW_RAM.used_mem_perc, 0)}% "))


(deflisten layout `./scripts/layout.sh`)

(defwidget layout []
    (box :class "layout"
         layout))


(defpoll wifi_icon :interval "1s" `./scripts/btn/network wifi_icon`)

(defpoll bat_icon :interval "1s" `./scripts/btn/battery -i`)

(defpoll bat_perc :interval "10s" `./scripts/btn/battery -l`)

(defwidget btn []
    (box :halign "end"
         :class "btn"
         :spacing -4
         "${wifi_icon}"
         "${bat_icon} ${bat_perc}"))
         